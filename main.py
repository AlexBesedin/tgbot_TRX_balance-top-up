import logging
import os
import telegram
from web3 import Web3
import requests
from telegram.ext import CommandHandler, Filters, MessageHandler, Updater
from tronapi import Tron, HttpProvider
from dotenv import load_dotenv


logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger()

load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TRX_ADDRESS = os.getenv('MAIN_ADDRESS')
PRIVATE_KEY_TRX = os.getenv('PRIVATE_KEY')
API_KEY_BSC = os.getenv('API_KEY_BSC')
BNB_WALLET = os.getenv('BNB_WALLET')


full_node = HttpProvider('https://api.trongrid.io')
solidity_node = HttpProvider('https://api.trongrid.io')
event_server = HttpProvider('https://api.trongrid.io')
api = Tron(
    full_node=full_node,
    solidity_node=solidity_node,
    event_server=event_server,
    private_key=PRIVATE_KEY_TRX,
    default_address=TRX_ADDRESS
)

bot = telegram.Bot(token=TELEGRAM_TOKEN)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update, context):
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ Tron (TRX).\r\n"
             "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å, –∑–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /info"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
def info(update, context):
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞\r\n"
             "/deposit - –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç —Å–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞"


    )


def get_balance(api_key, address):
    url = f'https://api.bscscan.com/api?module=account&action=balance&address={address}&tag=latest&apikey={api_key}'
    response = requests.get(url)
    if response.status_code == 200:
        balance = float(response.json()['result']) / 10**18
        return balance
    else:
        raise ValueError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bnb_balance
def bnb_balance(update, context):
    chat_id = update.message.chat_id
    balance = get_balance(API_KEY_BSC, BNB_WALLET)
    context.bot.send_message(
        chat_id=chat_id,
        text=f'–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.6f} BNB'
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance
def balance(update, context):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞
    api = Tron(
        full_node=full_node,
        solidity_node=solidity_node,
        event_server=event_server
    )
    account = api.trx.get_account(TRX_ADDRESS)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    balance = account['balance']
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üíµ–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance / 10**6} TRX"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deposit
def deposit(update, context):
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message = update.message.text
    parameters = message.split(' ')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if len(parameters) != 3:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. \r\n"
                                      "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /deposit <–∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è> <—Å—É–º–º–∞>")
        return

    to_address = parameters[1]
    amount = float(parameters[2])

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    result = api.trx.send_trx(
        to=to_address,
        amount=amount,
        options={
            'from': TRX_ADDRESS
        }
    )

    # –†–∞—Å–ø–µ—á–∞—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    print(result)
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
    balance = api.trx.get_balance(TRX_ADDRESS)
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text=f"–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance / 10 ** 6} TRX")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
def unknown(update, context):
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
    )


def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Updater –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CommandHandler('info', info))
    dispatcher.add_handler(CommandHandler('balance', balance))
    dispatcher.add_handler(CommandHandler('deposit', deposit))
    dispatcher.add_handler(CommandHandler('bnb_balance', bnb_balance))
    dispatcher.add_handler(MessageHandler(Filters.command, unknown))

    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()

#pip install python-telegram-bot
#pip install tronapi
#pip request
#pip install python-dotenv
